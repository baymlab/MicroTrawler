#!/bin/bash

usage() {
    echo "

    This script takes in a file where every line is a database accession number and then searches
    the ENA database for sequences pertaining to it.  Couple notes. First, we're only searching the
    assembly database. If somebody has sequenced a strain but didn't bother assembling and uploading
    it we miss it. Second, we're literally just searching the accession number (i.e. NCTC10); if 
    somebody decided to get cute with naming we miss it. 

    3 required options:

    -i, --input:    path to input file where every line is db accession (w/o space)
    -o, --output:   Path to desired output base directory. Within this folder, the 
                    structure will be database_accession/assembly_accession/*
    -t, --type:     Database type we're looking in. i.e. 'NCTC' or 'CIP'
    "
}

# go to https://github.com/enasequence/enaBrowserTools to get dis
ENADATAGET="/home/ak586/src/enaBrowserTools/python3/enaDataGet"

# get ena assembly accession number
check_ena_assembly() {

    if [ -s $2 ]; then
        echo "Looks like assembly accessions already created! Moving on."
    else
    # make header
    echo -e ""$3"_num\taccession\tversion\tassembly_name\tdescription" > $2
   
    # read in the list of db accessions
    while read db_acc; do
        space=FALSE
        db_acc_with_space=$(echo $db_acc | sed "s/$3/$3+/")
    
        # real stupid way to check if search failed
        prev=$(wc -l $2)
        
        # if we get a hit, we append it to our file
        curl -X GET -s "https://www.ebi.ac.uk/ena/portal/api/search?result=assembly&query=strain=$db_acc" | awk -v acc=$db_acc '{if(NR!=1){printf "%s\t%s\t%s\t%s\t%s\n", acc, $1, $2, $3, $4}}' >> $2
        
        # we're checking if it was found
        next=$(wc -l $2)
        if [[ $prev == $next ]]; then 
            curl -X GET -s "https://www.ebi.ac.uk/ena/portal/api/search?result=assembly&query=strain=%22$db_acc_with_space%22" | awk -v acc=$db_acc '{if(NR!=1){printf "%s\t%s\t%s\t%s\t%s\n", acc, $1, $2, $3, $4}}' >> $2
            next=$(wc -l $2)
            [[ $prev == $next ]] && echo "$db_acc not found" 
        else
            echo "$db_acc found"
        fi
    done<$1
    fi
}

# readin earlier output first col is database accession number second col is assembly acc. number
get_seqs() {
    
    sed 1d $1 | while read line; do
        
        db_acc=$(echo $line | cut -d' ' -f1)
        assembly_acc=$(echo $line | cut -d' ' -f2)

        if seqkit seq -v $2/$db_acc/$assembly_acc/assembly.fa 1> /dev/null 2> /dev/null; then
            echo "Appears that $db_acc is already downloaded. Moving on!"
        else
            # extract and make output folder for strain we care about
            echo ""
            echo "Getting assembly info for $db_acc"
            mkdir -p $2/$db_acc/$assembly_acc
            curl -s -X GET "https://www.ebi.ac.uk/ena/browser/api/xml/$assembly_acc" -H "accept: application/xml" > "$2/$db_acc/$assembly_acc/"$assembly_acc".xml"
            echo "Downloaded xml file"

            if grep -q "sequence_report" $2/$db_acc/$assembly_acc/"$assembly_acc".xml; then
                echo "Found sequence report w/in xml"
                seq_report=$(cat $2/$db_acc/$assembly_acc/"$assembly_acc".xml | grep sequence_report | sed -e 's/<[^>]*>//g' | tr -d ' ')
                aspera=$(echo $seq_report | sed 's:.*//:fasp-ebi@:' | sed 's/ftp/fasp/' | sed 's;/pub/;:;')
                ascp -QT -l 300m -P33001 -i ~/.ssh/asperaweb_id_dsa.openssh $aspera $2/$db_acc/$assembly_acc
                echo "Downloaded sequence report"
            fi

            # check if we have a sequence report!
            if compgen -G "$2/$db_acc/$assembly_acc/*_sequence_report.txt" > /dev/null; then
                
                echo "Downloading FASTAs from assembly report..."
                # if we do, then we can snag the ENA fasta accession number
                seqctr=0
                sed 1d $2/$db_acc/$assembly_acc/*_sequence_report.txt | while read seqrepline; do
                    fa_acc=$(echo "$seqrepline" | cut -f1)    
                    echo "Attempting to download $fa_acc"
                    if [ $seqctr -eq 0 ]; then
                        ofile=assembly.fa
                    else
                        ofile=assembly_"$seqctr".fa
                    fi
                    echo "Downloading to $2/$db_acc/$assembly_acc/$ofile"

                    # download the file
                    curl -s -X GET "https://www.ebi.ac.uk/ena/browser/api/fasta/"$fa_acc"?download=true&lineLimit=0" -H "accept: text/plain" > $2/$db_acc/$assembly_acc/$ofile
                    if seqkit seq -v $2/$db_acc/$assembly_acc/$ofile 1> /dev/null 2> /dev/null; then
                        echo "$ofile downloaded"
                    else
                        echo "$fa_acc download failed -- $ofile NOT downloaded"
                    fi

                    #if [ ! -s $2/$db_acc/$assembly_acc/$ofile ]; then
                    #    echo "First download attempt failed. Trying another approach..."
                    #    curl "https://www.ebi.ac.uk/ena/browser/api/fasta/"$fa_acc"?download=true" > $2/$db_acc/$assembly_acc/$ofile
                    #fi
                    #if [ ! -s $2/$db_acc/$assembly_acc/$ofile ]; then
                    #    echo "Second download attempt failed. Trying another approach..."
                    #    if [ -f $2/$db_acc/$assembly_acc/*dat* ]; then
                    #        extract_dat $(ls $2/$db_acc/$assembly_acc/*dat*) $2/$db_acc/$assembly_acc $ofile
                    #    fi
                    #fi
                    #if [ ! -s $2/$db_acc/$assembly_acc/$ofile ]; then
                    #    echo "Third download attempt failed. Giving up."
                    #    echo "$db_acc NOT downloaded"
                    #else
                    #    echo "$db_acc downloaded" 
                    #fi
                    ((seqctr++))
                done
            fi

            #elif [ -f $2/$db_acc/$assembly_acc/*.dat* ]; then
            #    echo "$db_acc fasta not found easily. Checking for dat files..."
            #    num_results=$(find $2/$db_acc/$assembly_acc/ -name *.dat* | wc -l)
            #    echo "$num_results dat file(s) found."
            #    if [ $num_results -gt 0 ]; then
            #        ctr=0
            #        for files in $2/$db_acc/$assembly_acc/*dat*; do 
            #            base=$(basename $files)
            #            dir=$(dirname $files)
            #            if [ $num_results -eq 1 ]; then
            #                outname="assembly.fa"
            #            else
            #                outname="assembly_"$ctr".fa"
            #            fi
            #            ((ctr++))
            #            # requires you to have the Biopython package downloaded 
            #            #python extract_seq_from_dat.py $files "$dir"/"$base".fa
            #            extract_dat $files $dir $outname
            #        done
            #        echo "$db_acc downloaded" 
            #    fi
            if grep -q "dat.gz" $2/$db_acc/$assembly_acc/"$assembly_acc".xml; then
                echo "Found dat file w/in xml"
                output="$2/$db_acc/$assembly_acc"
                dat=$(cat $output/"$assembly_acc".xml | grep dat.gz | sed -e 's/<[^>]*>//g' | tr -d ' ')
                dat_aspera=$(echo $dat | sed 's:.*//:fasp-ebi@:' | sed 's/ftp/fasp/' | sed 's;/pub/;:;')
                ascp -QT -l 300m -P33001 -i ~/.ssh/asperaweb_id_dsa.openssh $dat_aspera $2/$db_acc/$assembly_acc/"$assembly_acc".dat.gz
                echo "Downloaded dat file from xml"
                extract_dat $output/"$assembly_acc".dat.gz $output assembly.fa 2> /dev/null
                if seqkit seq -v $2/$db_acc/$assembly_acc/assembly.fa 1> /dev/null 2> /dev/null; then
                    echo "$fa_acc downloaded"
                else
                    echo "$fa_acc download failed -- NOT downloaded"
                    echo ""
                fi
            fi
        fi
    done
}

extract_dat() {

python -c "
from Bio import SeqIO
import gzip
infile = '$1'
if '.gz' in infile: 
    infile = gzip.open(infile, 'rt')
else: 
    infile = open(infile, 'rt')

outfile = '$2' + '/$3'
SeqIO.convert(infile, 'embl', outfile, 'fasta')"

}

main() {
    INPUT="./db_accessions"
    OUTDIR="."
    TYPE="CIP"
    for i in "$@"; do
    case $i in 
        -i|--input)
        INPUT=$2
        shift
        shift
        ;;
        -t|--type)
        TYPE=$2
        shift
        shift
        ;;
        -o|--outdir)
        OUTDIR=$2
        shift
        shift
        ;;
        -h|--help)
        usage
        exit
        ;;
        *)
        ;;
    esac
    done
    mkdir -p $OUTDIR
    check_ena_assembly $INPUT $OUTDIR/assembly_accessions $TYPE
    get_seqs $OUTDIR/assembly_accessions $OUTDIR
}

main "$@"
