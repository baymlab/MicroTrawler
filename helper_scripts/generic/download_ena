#!/bin/bash

usage() {
    echo "

    This script takes in a file where every line is a database accession number and then searches
    the ENA database for sequences pertaining to it.  Couple notes. First, we're only searching the
    assembly database. If somebody has sequenced a strain but didn't bother assembling and uploading
    it we miss it. Second, we're literally just searching the accession number (i.e. NCTC10); if 
    somebody decided to get cute with naming we miss it. 

    3 required options:

    -i, --input:    path to input file where every line is db accession (w/o space)
    -o, --output:   Path to desired output base directory. Within this folder, the 
                    structure will be database_accession/assembly_accession/*
    -t, --type:     Database type we're looking in. i.e. 'NCTC' or 'CIP'
    "
}

# go to https://github.com/enasequence/enaBrowserTools to get dis
ENADATAGET="/home/ak586/src/enaBrowserTools/python3/enaDataGet"



# get ena assembly accession number
check_ena_assembly() {

    # make header
    echo -e ""$3"_num\taccession\tversion\tassembly_name\tdescription" > $2
   
    # read in the list of db accessions
    while read db_acc; do
        space=FALSE
        db_acc_with_space=$(echo $db_acc | sed "s/$3/$3+/")
    
        # real stupid way to check if search failed
        prev=$(wc -l $2)
        
        # if we get a hit, we append it to our file
        curl -X GET -s "https://www.ebi.ac.uk/ena/portal/api/search?result=assembly&query=strain=$db_acc" | awk -v acc=$db_acc '{if(NR!=1){printf "%s\t%s\t%s\t%s\t%s\n", acc, $1, $2, $3, $4}}' >> $2
        
        # we're checking if it was found
        next=$(wc -l $2)
        if [[ $prev == $next ]]; then 
            curl -X GET -s "https://www.ebi.ac.uk/ena/portal/api/search?result=assembly&query=strain=%22$db_acc_with_space%22" | awk -v acc=$db_acc '{if(NR!=1){printf "%s\t%s\t%s\t%s\t%s\n", acc, $1, $2, $3, $4}}' >> $2
            next=$(wc -l $2)
            [[ $prev == $next ]] && echo "$db_acc not found" 
        else
            echo "$db_acc found"
        fi
    done<$1
}

# readin earlier output first col is database accession number second col is assembly acc. number
get_seqs() {
    
    sed 1d $1 | while read line; do
        
        echo ""
        db_acc=$(echo $line | cut -d' ' -f1)
        assembly_acc=$(echo $line | cut -d' ' -f2)

        # extract and make output folder for strain we care about
        echo "Getting assembly info for $db_acc"
        mkdir -p $2/$db_acc
        $ENADATAGET -d $2/$db_acc $assembly_acc >> ~/.cache/ena_info #you can check this for more info
       

        echo "Getting fasta for $db_acc"
        # check if we have a sequence report!
        if [ -f $2/$db_acc/$assembly_acc/*_sequence_report.txt ]; then
            
            echo "Assembly report found. Downloading fasta..."
            # if we do, then we can snag the ENA fasta accession number
            #check more than just the last line. missed some sequences before
            sed 1d $2/$db_acc/$assembly_acc/*_sequence_report.txt | while read seqrepline; do
                fa_acc=$(echo "$seqrepline" | cut -f1)    
                # download the file
                curl -s "https://www.ebi.ac.uk/ena/data/view/"$fasta_acc"&display=fasta" > $2/$db_acc/$assembly_acc/assembly.fa
                echo "$db_acc downloaded" 
            done

        elif [ -f $2/$db_acc/$assembly_acc/*.dat.gz ]; then
            echo "$db_acc fasta not found easily. Checking for dat files..."
            num_results=$(find $2/$db_acc/$assembly_acc/ -name *.dat* | wc -l)
            echo "$num_results dat file(s) found."
            if [ $num_results -gt 0 ]; then
                ctr=0
                for files in $2/$db_acc/$assembly_acc/*dat*; do 
                    base=$(basename $files)
                    dir=$(dirname $files)
                    if [ $num_results -eq 1 ]; then
                        outname="assembly.fa"
                    else
                        outname="assembly_"$ctr".fa"
                    fi
                    ((ctr++))
                    # requires you to have the Biopython package downloaded 
                    #python extract_seq_from_dat.py $files "$dir"/"$base".fa
                    extract_dat $files $dir $outname
                done
                echo "$db_acc downloaded" 
            fi
        else
            echo "Now checking xml file for dat link"
            output="$2/$db_acc/$assembly_acc"
            dat=$(cat $output/"$assembly_acc".xml | grep dat.gz | sed -e 's/<[^>]*>//g' | tr -d ' ')
            wget -q -O $output/"$assembly_acc".dat.gz "$dat" 
            extract_dat $output/"$assembly_acc".dat.gz $output assembly.fa
            echo "$db_acc downloaded" 
        fi 
    done
}

extract_dat() {

python -c "
from Bio import SeqIO
import gzip
infile = '$1'
if '.gz' in infile: infile = gzip.open(infile, 'rt')
outfile = '$2' + '/$3'
SeqIO.convert(infile, 'embl', outfile, 'fasta')"

}

main() {
    INPUT="./db_accessions"
    OUTDIR="."
    TYPE="CIP"
    for i in "$@"; do
    case $i in 
        -i|--input)
        INPUT=$2
        shift
        shift
        ;;
        -t|--type)
        TYPE=$2
        shift
        shift
        ;;
        -o|--outdir)
        OUTDIR=$2
        shift
        shift
        ;;
        -h|--help)
        usage
        exit
        ;;
        *)
        ;;
    esac
    done
    mkdir -p $OUTDIR
    check_ena_assembly $INPUT $OUTDIR/assembly_accessions $TYPE
    get_seqs $OUTDIR/assembly_accessions $OUTDIR
}

main "$@"
